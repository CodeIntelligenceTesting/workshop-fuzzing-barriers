#include <cifuzz/cifuzz.h>
#include <cstring>

#include "sut.h"

/**
 * SOLUTION
 *
 * The fuzzer is generally not able to automatically generate inputs
 * that contain valid checksums, hashes or signatures. This is
 * problematic as data with invalid checksums is usually discarded
 * early on in the code that is being tested and the fuzzer will not
 * be able to generate much code coverage. There are usually two
 * possible solutions to help the fuzzer in such a situation.
 *
 * 1. Disable checksum checking
 *    The logic that validates the checksum in the code that is
 *    being tested can be disabled for testing, for example with
 *    a specific preprocessor flag that is set for fuzzing builds
 *    only.
 *
 * 2. Add valid checksums in the fuzz test
 *    The fuzz test can make sure to generate valid checksums for
 *    the inputs that are generated by the fuzzer and passed to the
 *    system under test. This is done in the fuzz test below.
 */

FUZZ_TEST(const uint8_t *data, size_t size) {
    if(size < 32) {
        return;
    }
    packet p;
    memcpy(&p.data, data, 32);
    p.crc32 = crc32b(p.data, 32);
    process_packet(&p);
}
